/*
 * This file is generated by jOOQ.
 */
package fi.morabotti.travelapp.db.tables;


import fi.morabotti.travelapp.db.Indexes;
import fi.morabotti.travelapp.db.Keys;
import fi.morabotti.travelapp.db.Travelapp;
import fi.morabotti.travelapp.db.tables.records.TravelsRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.11"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Travels extends TableImpl<TravelsRecord> {

    private static final long serialVersionUID = -566507245;

    /**
     * The reference instance of <code>travelapp.travels</code>
     */
    public static final Travels TRAVELS = new Travels();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TravelsRecord> getRecordType() {
        return TravelsRecord.class;
    }

    /**
     * The column <code>travelapp.travels.id</code>.
     */
    public final TableField<TravelsRecord, Long> ID = createField("id", org.jooq.impl.SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>travelapp.travels.travel_code</code>.
     */
    public final TableField<TravelsRecord, String> TRAVEL_CODE = createField("travel_code", org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>travelapp.travels.name</code>.
     */
    public final TableField<TravelsRecord, String> NAME = createField("name", org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>travelapp.travels.description</code>.
     */
    public final TableField<TravelsRecord, String> DESCRIPTION = createField("description", org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>travelapp.travels.starting_city</code>.
     */
    public final TableField<TravelsRecord, String> STARTING_CITY = createField("starting_city", org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>travelapp.travels.destination_city</code>.
     */
    public final TableField<TravelsRecord, String> DESTINATION_CITY = createField("destination_city", org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>travelapp.travels.guided_tour</code>.
     */
    public final TableField<TravelsRecord, Boolean> GUIDED_TOUR = createField("guided_tour", org.jooq.impl.SQLDataType.BIT.nullable(false), this, "");

    /**
     * The column <code>travelapp.travels.cost</code>.
     */
    public final TableField<TravelsRecord, Double> COST = createField("cost", org.jooq.impl.SQLDataType.FLOAT.nullable(false), this, "");

    /**
     * The column <code>travelapp.travels.guide</code>.
     */
    public final TableField<TravelsRecord, String> GUIDE = createField("guide", org.jooq.impl.SQLDataType.VARCHAR(255).defaultValue(org.jooq.impl.DSL.inline("NULL", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>travelapp.travels.travel_type</code>.
     */
    public final TableField<TravelsRecord, String> TRAVEL_TYPE = createField("travel_type", org.jooq.impl.SQLDataType.VARCHAR(255).defaultValue(org.jooq.impl.DSL.inline("NULL", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * Create a <code>travelapp.travels</code> table reference
     */
    public Travels() {
        this(DSL.name("travels"), null);
    }

    /**
     * Create an aliased <code>travelapp.travels</code> table reference
     */
    public Travels(String alias) {
        this(DSL.name(alias), TRAVELS);
    }

    /**
     * Create an aliased <code>travelapp.travels</code> table reference
     */
    public Travels(Name alias) {
        this(alias, TRAVELS);
    }

    private Travels(Name alias, Table<TravelsRecord> aliased) {
        this(alias, aliased, null);
    }

    private Travels(Name alias, Table<TravelsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Travels(Table<O> child, ForeignKey<O, TravelsRecord> key) {
        super(child, key, TRAVELS);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Travelapp.TRAVELAPP;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.TRAVELS_PRIMARY, Indexes.TRAVELS_TRAVEL_CODE);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<TravelsRecord, Long> getIdentity() {
        return Keys.IDENTITY_TRAVELS;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<TravelsRecord> getPrimaryKey() {
        return Keys.KEY_TRAVELS_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<TravelsRecord>> getKeys() {
        return Arrays.<UniqueKey<TravelsRecord>>asList(Keys.KEY_TRAVELS_PRIMARY, Keys.KEY_TRAVELS_TRAVEL_CODE);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Travels as(String alias) {
        return new Travels(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Travels as(Name alias) {
        return new Travels(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Travels rename(String name) {
        return new Travels(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Travels rename(Name name) {
        return new Travels(name, null);
    }
}
